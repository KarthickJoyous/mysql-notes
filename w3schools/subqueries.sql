# Link : https://www.w3resource.com/sql-exercises/subqueries/index.php

/*

1. From the following tables, write a SQL query to find all the orders issued by the salesman 'Paul Adam'.
Return ord_no, purch_amt, ord_date, customer_id and salesman_id.

Sample table: Salesman

*/

SELECT * FROM orders WHERE salesman_id = (SELECT salesman_id FROM salesman WHERE name = "Paul Adam");

/*
needed
2. From the following tables write a SQL query to find all orders generated by London-based salespeople.
Return ord_no, purch_amt, ord_date, customer_id, salesman_id.

Sample table: Salesman

*/

SELECT * FROM orders WHERE salesman_id IN (SELECT salesman_id FROM salesman WHERE city = "London");

/*

3. From the following tables write a SQL query to find all orders generated by the salespeople who may work for customers whose id is 3007.
Return ord_no, purch_amt, ord_date, customer_id, salesman_id.

Sample table: Orders

*/

SELECT * FROM orders WHERE salesman_id IN (SELECT salesman_id FROM customer WHERE customer_id = 3007);

/*

4. From the following tables write a SQL query to find the order values greater than the average order value of 10th October 2012.

Return ord_no, purch_amt, ord_date, customer_id, salesman_id.

Sample table: Orders

*/

SELECT * FROM orders WHERE purch_amt > (SELECT AVG(purch_amt) FROM orders WHERE ord_date = "2012-10-10");

/*

5. From the following tables, write a SQL query to find all the orders generated in New York city (salesman).
Return ord_no, purch_amt, ord_date, customer_id and salesman_id.

Sample table: Orders

*/

SELECT * FROM orders WHERE salesman_id IN (SELECT salesman_id FROM salesman WHERE city = "New York");

/*

5. From the following tables, write a SQL query to find all the orders generated in New York city (customer).
Return ord_no, purch_amt, ord_date, customer_id and salesman_id.

Sample table: Orders

*/

SELECT * FROM orders WHERE customer_id IN (SELECT customer_id FROM customer WHERE city = "New York");

/*

5. From the following tables, write a SQL query to find all the orders generated in New York city (salesman / customer).
Return ord_no, purch_amt, ord_date, customer_id and salesman_id.

Sample table: Orders

*/

SELECT o.*
FROM orders AS o
JOIN customer AS c
    ON o.customer_id = c.customer_id
JOIN salesman AS s
    ON o.salesman_id = s.salesman_id
WHERE c.city = "New York" OR s.city = "New York";

SELECT o.*
FROM orders AS o
WHERE EXISTS (
    SELECT 1
    FROM customer AS c
    WHERE o.customer_id = c.customer_id AND c.city = "New York"
)
OR EXISTS (
    SELECT 1
    FROM salesman AS s
    WHERE o.salesman_id = s.salesman_id AND s.city = "New York"
);

SELECT o.*
FROM orders AS o
WHERE o.customer_id IN (
    SELECT customer_id
    FROM customer
    WHERE city = "New York"
)
OR o.salesman_id IN (
    SELECT salesman_id
    FROM salesman
    WHERE city = "New York"
);

/*

6. From the following tables write a SQL query to determine the commission of the salespeople in Paris.
Return commission.

Sample table: Salesman
*/

SELECT commission FROM salesman WHERE city = "Paris";

SELECT commission FROM salesman WHERE salesman_id IN (SELECT s.salesman_id FROM salesman AS s JOIN customer as c ON s.salesman_id = c.salesman_id WHERE s.city = "Paris");

/*

7. Write a query to display all the customers whose ID is 2001 below the salesperson ID of Mc Lyon.

"Write a query to find all customers whose ID matches the difference between the salesperson ID of 'Mc Lyon' and 2001."

Sample table: customer
Sample table: Salesman

*/

SELECT * FROM customer WHERE customer_id = (SELECT (salesman_id - 2001) as num FROM salesman WHERE name = "Mc Lyon");

/*

8. From the following tables write a SQL query to count the number of customers with grades above the average in New York City.
Return grade and count.  

Sample table: customer
Sample table: Salesman

*/

SELECT grade, COUNT(*) FROM customer GROUP BY grade HAVING grade > (SELECT AVG(grade) FROM customer WHERE city = "New York");

/*

9. From the following tables, write a SQL query to find those salespeople who earned the maximum commission.
Return ord_no, purch_amt, ord_date, and salesman_id.

Sample table: order
Sample table: Salesman
*/

SELECT ord_no, purch_amt, ord_date, salesman_id
FROM orders
WHERE salesman_id IN (SELECT salesman_id FROM salesman WHERE commission = (SELECT MAX(commission) FROM salesman));

SELECT o.ord_no, o.purch_amt, o.ord_date, o.salesman_id
FROM orders AS o
JOIN (
    SELECT salesman_id
    FROM salesman
    WHERE commission = (SELECT MAX(commission) FROM salesman)
) AS s ON o.salesman_id = s.salesman_id;

/*

10. From the following tables write SQL query to find the customers who placed orders on 17th August 2012.
Return ord_no, purch_amt, ord_date, customer_id, salesman_id and cust_name.

*/

SELECT o.ord_no, o.purch_amt, o.ord_date, o.customer_id, o.salesman_id, c.cust_name
FROM orders AS o
JOIN customer AS c
ON o.customer_id = c.customer_id
WHERE o.ord_date = "2012-08-17";

/*

11. From the following tables write a SQL query to find salespeople who had more than one customer.
Return salesman_id and name.

Sample table : Customer
Sample table: Salesman

*/

SELECT s.salesman_id, s.name, COUNT(c.salesman_id)
FROM salesman AS s
JOIN customer AS c
ON s.salesman_id = c.salesman_id
GROUP BY c.salesman_id
HAVING COUNT(c.salesman_id) > 1;

SELECT salesman_id, name 
FROM salesman a 
WHERE 1 < 
    (SELECT COUNT(*) 
     FROM customer 
     WHERE salesman_id = a.salesman_id);
     
/*

12. From the following tables write a SQL query to find those orders, which are higher than the average amount of the orders.
Return ord_no, purch_amt, ord_date, customer_id and salesman_id.

Write a SQL query to find all orders where the purchase amount is higher than the overall average purchase amount of all orders in the table. Return all columns.

Sample table : orders

*/

SELECT * FROM orders WHERE purch_amt > (SELECT AVG(purch_amt) FROM orders);

/*

12. From the following tables write a SQL query to find those orders, which are higher than the average amount of the customer's orders.
Return ord_no, purch_amt, ord_date, customer_id and salesman_id.

Write a SQL query to find all orders where the purchase amount is higher than the average purchase amount for the same customer (customer_id). Return all columns.

Sample table : orders

*/

SELECT * 
FROM orders AS a
WHERE purch_amt > (SELECT AVG(purch_amt) FROM orders AS b WHERE a.customer_id = b.customer_id);

/*

13. From the following tables write a SQL query to find those orders that are equal or higher than the average amount of the customer's orders.
Return ord_no, purch_amt, ord_date, customer_id and salesman_id.

Sample table: Orders

*/

SELECT a.* FROM orders AS a WHERE a.purch_amt >= (SELECT AVG(b.purch_amt) FROM orders as b WHERE a.customer_id = b.customer_id);

/*

14. Write a query to find the sums of the amounts from the orders table, grouped by date, and eliminate all dates where the sum was not at least 1000.00 above the maximum order amount for that date.

Sample table: Orders

*/

SELECT SUM(a.purch_amt) AS total_purch_amt, a.ord_date FROM orders AS a
GROUP BY a.ord_date
HAVING total_purch_amt > ((SELECT MAX(purch_amt) FROM orders AS b WHERE a.ord_date = b.ord_date) + 1000);

/*

15. Write a query to extract all data from the customer table if and only if one or more of the customers in the customer table are located in London.
Sample table : Customer

*/

SELECT c1.* FROM customer AS c1 WHERE EXISTS (SELECT 1 FROM customer AS c2 WHERE c2.city = "London");

/*

16. From the following tables write a SQL query to find salespeople who deal with multiple customers.
Return salesman_id, name, city and commission.

Sample table : Customer
Sample table : Salesman

*/

SELECT s.*, COUNT(*) as "TOTAL_CUSTOMERS" FROM salesman AS s
JOIN customer AS c
ON s.salesman_id = c.salesman_id
GROUP BY c.salesman_id
HAVING TOTAL_CUSTOMERS > 1;

SELECT s.* FROM salesman AS s
WHERE ((SELECT COUNT(*) FROM customer AS c WHERE s.salesman_id = c.salesman_id) > 1);

SELECT *
FROM salesman
WHERE salesman_id IN (
   SELECT DISTINCT salesman_id 
   FROM customer a 
   WHERE EXISTS (
      SELECT * 
      FROM customer b 
      WHERE b.salesman_id = a.salesman_id 
      AND b.cust_name != a.cust_name
   )
);

/*

17. From the following tables write a SQL query to find salespeople who deal with a single customer. Return salesman_id, name, city and commission.

Sample table : Customer

*/

SELECT s.*, COUNT(*) as "TOTAL_CUSTOMERS" FROM salesman AS s
JOIN customer AS c
ON s.salesman_id = c.salesman_id
GROUP BY c.salesman_id
HAVING TOTAL_CUSTOMERS = 1;

SELECT s.* FROM salesman AS s
WHERE ((SELECT COUNT(*) FROM customer AS c WHERE s.salesman_id = c.salesman_id) = 1);

SELECT s.* FROM salesman AS s
WHERE salesman_id IN (SELECT DISTINCT salesman_id FROM customer AS c1 WHERE NOT EXISTS (SELECT 1 FROM customer AS c2 WHERE c1.salesman_id = c2.salesman_id AND c1.cust_name != c2.cust_name));

/*

18. From the following tables, write a SQL query to find the salespeople who deal the customers with more than one order.
Return salesman_id, name, city and commission.

Sample table: Salesman
Sample table: Orders
Sample table: Customer

*/

SELECT s1.* 
FROM salesman AS s1
WHERE salesman_id IN (
    SELECT c.salesman_id 
    FROM customer AS c
    JOIN (
        SELECT o.customer_id, COUNT(*) AS ORDERS_COUNT 
        FROM orders AS o
        GROUP BY o.customer_id 
        HAVING ORDERS_COUNT > 1
    ) AS s2
    ON c.customer_id = s2.customer_id
);

/*

19. From the following tables write a SQL query to find all salespeople who are located in any city where there is at least one customer.
Return salesman_id, name, city and commission.

Sample table: Salesman
Sample table: customer

*/

SELECT s.* FROM salesman AS s WHERE EXISTS (SELECT 1 FROM customer AS c WHERE s.city = c.city);

SELECT s.city, GROUP_CONCAT(DISTINCT s.name) AS salesman, GROUP_CONCAT(DISTINCT c.cust_name) as customer FROM salesman AS s
JOIN customer AS c
ON s.city = c.city
GROUP BY s.city;

/*

20. From the following tables write a SQL query to find salespeople whose place of residence matches any city where customers live.
Return salesman_id, name, city and commission.

Sample table: Salesman
Sample table: customer

*/

SELECT salesman_id, name, city, commission FROM salesman WHERE city = ANY (SELECT DISTINCT city FROM customer);

SELECT salesman_id, name, city, commission FROM salesman WHERE city IN (SELECT DISTINCT city FROM customer);

/*

21. From the following tables write a SQL query to find all those salespeople whose names appear alphabetically lower than the customer’s name.
Return salesman_id, name, city, commission.

Sample table: Salesman
Sample table: customer

*/

SELECT s.salesman_id, s.name, s.city, s.commission FROM salesman AS s WHERE EXISTS (SELECT 1 FROM customer AS c WHERE s.name < c.cust_name);

SELECT salesman_id, name, city, commission FROM salesman WHERE name < ANY (SELECT DISTINCT cust_name FROM customer);

SELECT DISTINCT s.salesman_id, s.name, s.city, s.commission FROM salesman AS s
JOIN customer AS c
ON s.name < c.cust_name;

/*

22. From the following table write a SQL query to find all those customers with a higher grade than any customer who belongs to the alphabetically lower than the city New York.
Return customer_id, cust_name, city, grade, salesman_id.

Sample table : customer

*/

SELECT DISTINCT c1.* FROM customer AS c1
CROSS JOIN customer AS c2
WHERE c1.grade > c2.grade
AND c2.city < "New York";

SELECT c1.* FROM customer AS c1 WHERE EXISTS (SELECT 1 FROM customer AS c2 WHERE c1.grade > c2.grade AND c2.city < "New York");

SELECT * FROM customer WHERE grade > ANY (SELECT DISTINCT grade FROM customer WHERE city < "New York");

/*

23. From the following table write a SQL query to find all those orders whose order amount exceeds at least one of the orders placed on September 10th 2012.
Return ord_no, purch_amt, ord_date, customer_id and salesman_id.

Sample table: Orders

*/

SELECT o.* FROM orders AS o WHERE purch_amt > ANY (SELECT DISTINCT purch_amt FROM orders WHERE DATE(ord_date) = "2012-09-10");

SELECT o1.* FROM orders AS o1 WHERE EXISTS (SELECT 1 FROM orders AS o2 WHERE DATE(o2.ord_date) = "2012-09-10" AND o1.purch_amt > o2.purch_amt);

# Below query is interesting :

SELECT o.* FROM orders AS o WHERE purch_amt > (SELECT MIN(purch_amt) FROM orders WHERE DATE(ord_date) = "2012-09-10");

/*

24. From the following tables write a SQL query to find orders where the order amount is less than the order amount of a customer residing in London City.
Return ord_no, purch_amt, ord_date, customer_id and salesman_id.

Sample table: Orders

*/

SELECT o.* FROM orders AS o WHERE o.purch_amt < ANY (SELECT DISTINCT purch_amt FROM orders WHERE customer_id IN (SELECT customer_id FROM customer WHERE city = "London"));

SELECT o1.* FROM orders as o1
JOIN(
    SELECT MAX(o2.purch_amt) AS high_order FROM orders AS o2
    JOIN customer AS c
    ON o2.customer_id = c.customer_id
    WHERE c.city = "London"
) AS london_orders
ON o1.purch_amt < london_orders.high_order;

/*

25. From the following tables write a SQL query to find those orders where every order amount is less than the maximum order amount of a customer who lives in London City.
Return ord_no, purch_amt, ord_date, customer_id and salesman_id.

Sample table: Orders

*/

WITH max_london_purch_amt AS (SELECT MAX(o.purch_amt) AS max_purch_amt FROM orders AS o JOIN customer AS c ON o.customer_id = c.customer_id AND c.city = "London")

SELECT * FROM orders WHERE purch_amt < (SELECT max_purch_amt FROM max_london_purch_amt);

/*

26. From the following tables write a SQL query to find those customers whose grades are higher than those living in New York City.
Return customer_id, cust_name, city, grade and salesman_id.

Sample table : Customer

*/

SELECT * FROM customer WHERE grade > (SELECT MAX(grade) FROM customer WHERE city = "New York");

/*

27. From the following tables write a SQL query to calculate the total order amount generated by a salesperson.
Salespersons should be from the cities where the customers reside.
Return salesperson name, city and total order amount.

Sample table: Orders
Sample table: Salesman
Sample table: Customer

*/

SELECT s.name, s.city, (SELECT SUM(o.purch_amt) FROM orders AS o WHERE o.salesman_id = s.salesman_id) FROM salesman AS s
WHERE s.salesman_id IN (SELECT salesman_id FROM salesman WHERE city IN (SELECT DISTINCT city FROM customer));

SELECT 
    s.name,
    s.city,
    (SELECT SUM(o.purch_amt) FROM orders AS o WHERE o.salesman_id = s.salesman_id)
FROM salesman AS s
WHERE s.city IN (SELECT DISTINCT city FROM customer);

/*

28. From the following tables write a SQL query to find those customers whose grades are not the same as those who live in London City.
Return customer_id, cust_name, city, grade and salesman_id.

Sample table : Customer

*/

SELECT * FROM customer WHERE grade NOT IN (SELECT grade FROM customer WHERE city = "London" AND grade IS NOT NULL);

SELECT * FROM customer WHERE grade != ALL (SELECT grade FROM customer WHERE city = "London" AND grade IS NOT NULL);

SELECT c1.* FROM customer AS c1 WHERE EXISTS (SELECT 1 FROM customer AS c2 WHERE c1.grade != c2.grade AND c2.city = "London");

SELECT c1.* FROM customer AS c1 WHERE NOT EXISTS (SELECT 1 FROM customer AS c2 WHERE c1.grade = c2.grade AND c2.city = "London");

/*

29. From the following tables write a SQL query to find those customers whose grades are different from those living in Paris.
Return customer_id, cust_name, city, grade and salesman_id.

Sample table : Customer

*/

SELECT * FROM customer WHERE grade NOT IN (SELECT grade FROM customer WHERE city = "Paris");

/*

30. From the following tables write a SQL query to find all those customers who have different grades than any customer who lives in Dallas City.
Return customer_id, cust_name,city, grade and salesman_id.

Sample table : Customer

*/

SELECT * FROM customer WHERE grade NOT IN (SELECT grade FROM customer WHERE city = "Dallas");

/*

31. From the following tables write a SQL query to calculate the average price of each manufacturer's product along with their name.
Return Average Price and Company.

Sample table: company_mast
Sample table: item_mast

*/

SELECT c.com_name, (SELECT AVG(i.pro_price) FROM item_mast AS i WHERE c.com_id = i.pro_com) FROM company_mast AS c;

SELECT c.com_name, AVG(i.pro_price) FROM company_mast AS c
JOIN item_mast AS i
ON c.com_id = i.pro_com
GROUP BY i.pro_com;

/*

32. From the following tables write a SQL query to calculate the average price of each manufacturer's product of 350 or more.
Return Average Price and Company.

Sample table: company_mast
Sample table: item_mast

*/

SELECT c.com_name, AVG(i.pro_price) FROM company_mast AS c
JOIN item_mast AS i
ON c.com_id = i.pro_com
WHERE i.pro_price >= 350
GROUP BY c.com_id;

/*

33. From the following tables, write a SQL query to find the most expensive product of each company.
Return Product Name, Price and Company.

Sample table: company_mast

*/

SELECT i1.pro_name, i1.pro_price, c.com_name FROM item_mast AS i1
JOIN company_mast AS c
ON i1.pro_com = c.com_id
WHERE i1.pro_price = (SELECT MAX(i2.pro_price) FROM item_mast AS i2 WHERE i1.pro_com = i2.pro_com);

/*

34. From the following tables write a SQL query to find employees whose last name is Gabriel or Dosio. Return emp_idno, emp_fname, emp_lname and emp_dept.

Sample table: emp_details

*/

SELECT * FROM emp_details WHERE emp_lname IN ("Gabriel", "Dosio");

/*

35. From the following tables, write a SQL query to find the employees who work in department 89 or 63.
Return emp_idno, emp_fname, emp_lname and emp_dept.

*/

SELECT * FROM emp_details WHERE emp_dept IN (89, 63);

/*

36. From the following tables write a SQL query to find those employees who work for the department where the departmental allotment amount is more than Rs. 50000.
Return emp_fname and emp_lname.

Sample table: emp_department
Sample table: emp_details

*/

SELECT e.emp_fname, e.emp_lname FROM emp_details AS e
JOIN emp_department AS ed
ON e.emp_dept = ed.DPT_CODE
WHERE ed.DPT_ALLOTMENT > 50000;

/*

37. From the following tables write a SQL query to find the departments whose sanction amount is higher than the average sanction amount for all departments.
Return dpt_code, dpt_name and dpt_allotment.

Sample table: emp_department

*/

SELECT ed.* FROM emp_department AS ed WHERE ed.DPT_ALLOTMENT > (SELECT AVG(DPT_ALLOTMENT) FROM emp_department);

/*

38. From the following tables write a SQL query to find which departments have more than two employees.
Return dpt_name.

Sample table: emp_department

*/

SELECT ed.DPT_NAME from emp_department AS ed
JOIN emp_details AS e
ON ed.DPT_CODE = e.emp_dept
GROUP BY ed.DPT_CODE
HAVING COUNT(*) > 2;

SELECT ed.DPT_NAME FROM emp_department AS ed
WHERE (SELECT COUNT(*) FROM emp_details AS e WHERE ed.DPT_CODE = e.emp_dept) > 2;

/*

39. From the following tables write a SQL query to find the departments with the second lowest sanction amount.
Return emp_fname and emp_lname.

Sample table: emp_department
Sample table: emp_details

*/

SELECT * FROM emp_details WHERE emp_dept = (SELECT DPT_CODE FROM emp_department ORDER BY DPT_ALLOTMENT ASC LIMIT 1,1);

SET @n = 2;

SET @query = CONCAT(
    'SELECT DPT_CODE INTO @emp_code FROM emp_department ORDER BY DPT_ALLOTMENT ASC LIMIT ', @n - 1, ', 1;'
);

PREPARE stmt FROM @query;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;

SELECT * 
FROM emp_details 
WHERE emp_dept = @emp_code;